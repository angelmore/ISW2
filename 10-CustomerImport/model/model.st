Object subclass: #Address	instanceVariableNames: 'id streetName streetNumber town zipCode province'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetName	^streetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetName: aStreetName 	streetName := aStreetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetNumber	^streetNumber ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetNumber: aStreetNumber 	streetNumber := aStreetNumber ! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:07'!town: aTown 	town := aTown! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:12'!town	^town! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:11'!province	^province! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:08'!province: aProvince 	province := aProvince	! !!Address methodsFor: 'as yet unclassified' stamp: 'HernanWilkinson 11/1/2016 10:06'!isAt: aStreetName	^streetName = aStreetName ! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:08'!zipCode: aZipCode 	zipCode := aZipCode! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:13'!zipCode	^zipCode! !TestCase subclass: #CustomerImportTest	instanceVariableNames: 'session importer system'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'ANgel 11/16/2017 19:36'!setUp	system := Environment current createCustomerSystem.	system start! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'HernanWilkinson 11/1/2016 15:24'!customerMapping	^ ClassMapping		withDefaultTableNameFor: Customer		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #firstName)				with: (EmbededMapping withDefaultFieldNameFor: #lastName)				with: (EmbededMapping withDefaultFieldNameFor: #identificationType)				with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)				with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address))! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'Angel 11/13/2017 21:00'!tearDown	system stop! !!CustomerImportTest methodsFor: 'setup-teardown' stamp: 'HernanWilkinson 11/1/2016 15:23'!addressMapping	^ ClassMapping		withDefaultTableNameFor: Address		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #streetName)				with: (EmbededMapping withDefaultFieldNameFor: #streetNumber)				with: (EmbededMapping withDefaultFieldNameFor: #town)				with: (EmbededMapping withDefaultFieldNameFor: #zipCode)				with: (EmbededMapping withDefaultFieldNameFor: #province))! !!CustomerImportTest methodsFor: 'asserting' stamp: 'angelmore 11/19/2017 19:39'!assert: customer hasAddressAt: streetName number: streetNumber in: town zipCode: zipCode province: province	| address |		address := customer addressAt: streetName ifNone: [ self fail ].	self assert: address streetName equals: streetName.	self assert: address streetNumber equals: streetNumber.	self assert: address town equals: town.	self assert: address zipCode equals: zipCode.	self assert: address province equals: province.	! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 16:02'!assertImportedCustomersSizeIsCorrect	self assert: self allCustomers size equals: 2! !!CustomerImportTest methodsFor: 'asserting' stamp: 'angelmore 11/19/2017 17:02'!assertJuanPerezWasImportedCorrectly		| customer idType idNumber |		idType := 'C'.	idNumber := '23-25666777-9'.	customer := self customerIdentifiedAs: idType numbered: idNumber.		self assert: customer isNamed: 'Juan' lastName: 'Perez' identfiedAs: idType withNumber: idNumber andNumberOfAddresses: 1.	self assert: customer hasAddressAt: 'Alem' number: 1122 in: 'CABA' zipCode: 1001 province: 'CABA'.	! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 10:56'!assert: customer isNamed: firstName lastName: lastName identfiedAs: idType withNumber: idNumber andNumberOfAddresses: addressesSize	self assert: customer firstName equals: firstName.	self assert: customer lastName equals: lastName.	self assert: customer identificationType equals: idType.	self assert: customer identificationNumber equals: idNumber.	self assert: customer numberOfAddresses equals: addressesSize .! !!CustomerImportTest methodsFor: 'asserting' stamp: 'HernanWilkinson 11/1/2016 15:16'!assertPepeSanchezWasImportedCorrectly	| customer idType idNumber |	idType := 'D'.	idNumber := '22333444'.	customer := self customerIdentifiedAs: idType numbered: idNumber.		self assert: customer isNamed: 'Pepe' lastName: 'Sanchez' identfiedAs: idType withNumber: idNumber andNumberOfAddresses: 2.	self assert: customer hasAddressAt: 'San Martin' number: 3322 in: 'Olivos' zipCode: 1636 province: 'BsAs'.	self assert: customer hasAddressAt: 'Maipu' number: 888 in: 'Florida' zipCode: 1122 province: 'Buenos Aires'! !!CustomerImportTest methodsFor: 'customers' stamp: 'Angel 11/13/2017 23:02'!customersIsEmpty		^(self allCustomers) isEmpty! !!CustomerImportTest methodsFor: 'customers' stamp: 'Angel 11/13/2017 21:02'!allCustomers	^ system allCustomers! !!CustomerImportTest methodsFor: 'testing' stamp: 'angelmore 11/19/2017 15:39'!testEmptyLinesAreRecognizedAsInvalidRecords		self		should: [ self importCustomersFrom: self dataWithEmptyLine ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'angelmore 11/19/2017 15:38'!testCanNotImportAddressWithoutCustomer	self 		should: [ self importCustomersFrom: self addressWithoutCustomerTestData ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError |			self assert: anError messageText equals: CustomerImporter addressWithoutCustomerErrorDescription.			self assert: self customersIsEmpty ]	! !!CustomerImportTest methodsFor: 'testing' stamp: 'angelmore 11/19/2017 15:38'!testCanNotImportAddressRecordWithLessThanSixFields		self		should: [ self importCustomersFrom: self addressRecordWithLessThanSixFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidAddressRecordErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]! !!CustomerImportTest methodsFor: 'testing' stamp: 'angelmore 11/19/2017 15:39'!testCanNotImportCustomerRecordWithMoreThanFiveFields	self 		should: [ self importCustomersFrom: self customerRecordWithMoreThanFiveFieldsTestData ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidCustomerRecordErrorDescription.			self assert: self customersIsEmpty ]	! !!CustomerImportTest methodsFor: 'testing' stamp: 'angelmore 11/19/2017 15:39'!testCanNotImportCustomerRecordWithLessThanFiveFields	self 		should: [ self importCustomersFrom: self customerRecordWithLessThanFiveFieldsTestData ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidCustomerRecordErrorDescription.			self assert: self customersIsEmpty ]	! !!CustomerImportTest methodsFor: 'testing' stamp: 'angelmore 11/19/2017 15:39'!testShouldNotImportCustomerRecordsStartingWithMoreThanC	self 		should: [ self importCustomersFrom: self customerRecordStartingWithMoreThanOneCTestData ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError |			self assert: anError messageText equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: self customersIsEmpty ]	! !!CustomerImportTest methodsFor: 'testing' stamp: 'angelmore 11/19/2017 15:39'!testShouldNotImportAddressRecordsStartingWithMoreThanA	self 		should: [ self importCustomersFrom: self addressRecordStartingWithMoreThanOneATestData ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]	! !!CustomerImportTest methodsFor: 'testing' stamp: 'angelmore 11/19/2017 15:38'!testCanNotImportAddressRecordWithMoreThanSixFields	self 		should: [ self importCustomersFrom: self addressRecordWithMoreThanSixFieldsTestData ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidAddressRecordErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]	! !!CustomerImportTest methodsFor: 'testing' stamp: 'angelmore 11/19/2017 15:39'!testImportCustomers	self importCustomersFrom: self validTestData.	self assertImportedCustomersSizeIsCorrect.	self assertPepeSanchezWasImportedCorrectly.	self assertJuanPerezWasImportedCorrectly! !!CustomerImportTest methodsFor: 'importing' stamp: 'Angel 11/13/2017 22:42'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber	^ system		customerIdentifiedAs: anIdentifycationType		numbered: anIdentificationNumber! !!CustomerImportTest methodsFor: 'importing' stamp: 'angelmore 11/19/2017 15:38'!importCustomersFrom: inputStream	system importCustomersFrom: inputStream! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/2/2016 10:45'!addressRecordStartingWithMoreThanOneATestData		^ ReadStream on: self alwaysImportedCustomerRecord,'AA,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/1/2016 15:59'!addressWithoutCustomerTestData		^ ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/2/2016 10:45'!addressRecordWithMoreThanSixFieldsTestData		^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAs,y otra cosa'! !!CustomerImportTest methodsFor: 'test data - address' stamp: 'HernanWilkinson 11/2/2016 10:45'!addressRecordWithLessThanSixFieldsTestData		^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636'! !!CustomerImportTest methodsFor: 'test data' stamp: 'HernanWilkinson 11/2/2016 15:52'!dataWithEmptyLine		^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAs'! !!CustomerImportTest methodsFor: 'test data' stamp: 'angelmore 11/19/2017 15:54'!validTestData	^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:47'!alwaysImportedCustomerIdNumber	^ '22333444'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:46'!alwaysImportedCustomerIdType	^ 'D'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:50'!customerRecordWithLessThanFiveFieldsTestData		^ ReadStream on: 'C,Pepe,Sanchez,D'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:47'!alwaysImportedCustomerRecord	^ 'C,Pepe,Sanchez,', self alwaysImportedCustomerIdType, ',', self alwaysImportedCustomerIdNumber ! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:53'!customerRecordWithMoreThanFiveFieldsTestData		^ ReadStream on: self alwaysImportedCustomerRecord,',x'! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:47'!alwaysImportedCustomer	^ self		customerIdentifiedAs: self alwaysImportedCustomerIdType		numbered: self alwaysImportedCustomerIdNumber! !!CustomerImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/1/2016 17:48'!customerRecordStartingWithMoreThanOneCTestData		^ ReadStream on:'CC,Pepe,Sanchez,D,22333444'! !Object subclass: #CustomerImporter	instanceVariableNames: 'line readStream session record newCustomer system'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!CustomerImporter methodsFor: 'importing - private - address' stamp: 'HernanWilkinson 11/2/2016 10:55'!isAddressRecord	^ record first = 'A'! !!CustomerImporter methodsFor: 'importing - private - address' stamp: 'HernanWilkinson 11/2/2016 10:57'!importAddress	| newAddress |	self assertThereIsCustsomerForAddress.	self assertValidAddressRecordSize.		newAddress := Address new.	newAddress streetName: record second.	newAddress streetNumber: record third asInteger.	newAddress town: record fourth.	newAddress zipCode: record fifth asInteger.	newAddress province: record sixth.	^ newCustomer addAddress: newAddress! !!CustomerImporter methodsFor: 'importing - private - address' stamp: 'HernanWilkinson 11/2/2016 10:57'!assertValidAddressRecordSize		record size ~= 6 ifTrue: [ self signalInvalidAddressRecord ].	! !!CustomerImporter methodsFor: 'importing - private - address' stamp: 'HernanWilkinson 11/2/2016 10:56'!assertThereIsCustsomerForAddress	newCustomer isNil ifTrue: [ self signalAddressWithoutCustomerError ].	! !!CustomerImporter methodsFor: 'initialization' stamp: 'Angel 11/13/2017 22:37'!initializeOn: aReadStream on: aSystem	readStream := aReadStream.	system := aSystem.! !!CustomerImporter methodsFor: 'importing - private' stamp: 'HernanWilkinson 11/2/2016 15:54'!convertLineToRecord	record := line substrings: {$,}.		self assertRecordNotEmpty! !!CustomerImporter methodsFor: 'importing - private' stamp: 'HernanWilkinson 11/2/2016 10:55'!canImportNextLine	line := readStream nextLine.	^ line notNil! !!CustomerImporter methodsFor: 'importing - private' stamp: 'HernanWilkinson 11/2/2016 15:55'!assertRecordNotEmpty		record isEmpty ifTrue: [ self signalInvalidRecordType ]! !!CustomerImporter methodsFor: 'importing - private' stamp: 'HernanWilkinson 11/1/2016 17:52'!importRecord		self isCustomerRecord ifTrue: [ ^self importCustomer ].	self isAddressRecord ifTrue: [ ^self importAddress ].		self signalInvalidRecordType! !!CustomerImporter methodsFor: 'importing' stamp: 'HernanWilkinson 11/1/2016 17:51'!import	[ self canImportNextLine ] whileTrue: [ 		self convertLineToRecord.		self importRecord ]! !!CustomerImporter methodsFor: 'importing' stamp: 'angelmore 11/19/2017 15:38'!importCustomersFrom: inputStream	system importCustomersFrom: inputStream! !!CustomerImporter methodsFor: 'importing - private - customer' stamp: 'HernanWilkinson 11/2/2016 10:57'!assertValidCustomerRecordSize		record size ~= 5 ifTrue: [ self signalInvalidCustomerRecord ].	! !!CustomerImporter methodsFor: 'importing - private - customer' stamp: 'Angel 11/13/2017 22:54'!importCustomer	self assertValidCustomerRecordSize.		newCustomer := Customer new.	newCustomer firstName: record second.	newCustomer lastName: record third.	newCustomer identificationType: record fourth.	newCustomer identificationNumber: record fifth.	^ system persistCustomer: newCustomer.! !!CustomerImporter methodsFor: 'importing - private - customer' stamp: 'HernanWilkinson 11/2/2016 10:55'!isCustomerRecord	^ record first = 'C'! !!CustomerImporter methodsFor: 'error signal' stamp: 'HernanWilkinson 11/2/2016 10:52'!signalInvalidCustomerRecord 		self error: self class invalidCustomerRecordErrorDescription ! !!CustomerImporter methodsFor: 'error signal' stamp: 'HernanWilkinson 11/1/2016 18:01'!signalInvalidAddressRecord 		self error: self class invalidAddressRecordErrorDescription ! !!CustomerImporter methodsFor: 'error signal' stamp: 'HernanWilkinson 11/1/2016 17:54'!signalInvalidRecordType	self error: self class invalidRecordTypeErrorDescription! !!CustomerImporter methodsFor: 'error signal' stamp: 'HernanWilkinson 11/1/2016 16:01'!signalAddressWithoutCustomerError	self error: self class addressWithoutCustomerErrorDescription.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CustomerImporter class	instanceVariableNames: ''!!CustomerImporter class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 11/2/2016 10:51'!invalidCustomerRecordErrorDescription		^'Invalid customer record'! !!CustomerImporter class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 11/1/2016 16:02'!addressWithoutCustomerErrorDescription		^'There is no Customer for the imported address'! !!CustomerImporter class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 11/1/2016 18:00'!invalidAddressRecordErrorDescription		^'Invalid address record'! !!CustomerImporter class methodsFor: 'error descriptions' stamp: 'HernanWilkinson 11/1/2016 17:54'!invalidRecordTypeErrorDescription		^'Invalid record type'! !!CustomerImporter class methodsFor: 'instance creation' stamp: 'Angel 11/13/2017 22:38'!from: aReadStream on: aSystem	^self new initializeOn: aReadStream on: aSystem ! !Object subclass: #CustomerSystem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!CustomerSystem methodsFor: 'importing' stamp: 'angelmore 11/19/2017 20:02'!importCustomersFrom: inputStream
	self subclassResponsibility! !!CustomerSystem methodsFor: 'importing' stamp: 'angelmore 11/19/2017 20:02'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber
	self subclassResponsibility! !!CustomerSystem methodsFor: 'accessing' stamp: 'angelmore 11/19/2017 20:02'!persistCustomer: newCustomer
	self subclassResponsibility! !!CustomerSystem methodsFor: 'setup-teardown' stamp: 'angelmore 11/19/2017 20:02'!stop
	self subclassResponsibility! !!CustomerSystem methodsFor: 'setup-teardown' stamp: 'angelmore 11/19/2017 20:02'!customerMapping
	self subclassResponsibility! !!CustomerSystem methodsFor: 'setup-teardown' stamp: 'angelmore 11/19/2017 20:02'!start
	self subclassResponsibility! !!CustomerSystem methodsFor: 'setup-teardown' stamp: 'angelmore 11/19/2017 20:02'!addressMapping
	self subclassResponsibility! !!CustomerSystem methodsFor: 'customers' stamp: 'angelmore 11/19/2017 20:02'!allCustomers
	self subclassResponsibility! !Object subclass: #Environment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!Environment methodsFor: 'as yet unclassified' stamp: 'ANgel 11/16/2017 20:27'!createSupplierSystem	self subclassResponsibility ! !!Environment methodsFor: 'as yet unclassified' stamp: 'ANgel 11/16/2017 19:48'!createCustomerSystem	self subclassResponsibility ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Environment class	instanceVariableNames: ''!!Environment class methodsFor: 'accessing' stamp: 'ANgel 11/16/2017 19:44'!current	^self allSubclasses 	detect: [ :anEnvironmentClass | anEnvironmentClass  isCurrent ]	ifFound: [ :anEnvironmentClass | anEnvironmentClass new ] 	ifNone: [ self error: 'No environment found' ].! !!Environment class methodsFor: 'testing' stamp: 'ANgel 11/16/2017 19:49'!isCurrent	self subclassResponsibility ! !Environment subclass: #DevelopmentEnvironment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!DevelopmentEnvironment methodsFor: 'as yet unclassified' stamp: 'ANgel 11/16/2017 19:53'!createCustomerSystem	^TransientCustomerSystem new.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DevelopmentEnvironment class	instanceVariableNames: ''!!DevelopmentEnvironment class methodsFor: 'testing' stamp: 'angelmore 11/19/2017 15:54'!isCurrent	^false! !Environment subclass: #IntegrationEnvironment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!IntegrationEnvironment methodsFor: 'as yet unclassified' stamp: 'ANgel 11/16/2017 20:31'!createSupplierSystem	^PersistanceSupplierSystem new.! !!IntegrationEnvironment methodsFor: 'as yet unclassified' stamp: 'ANgel 11/16/2017 19:52'!createCustomerSystem	^PersistanceCustomerSystem new.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!IntegrationEnvironment class	instanceVariableNames: ''!!IntegrationEnvironment class methodsFor: 'testing' stamp: 'angelmore 11/19/2017 15:54'!isCurrent	^true! !Object subclass: #Party	instanceVariableNames: 'id firstName identificationType identificationNumber addresses'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!Party methodsFor: 'adding' stamp: 'angelmore 11/19/2017 21:01'!addAddress: anAddress 		self subclassResponsibility ! !!Party methodsFor: 'accessing' stamp: 'angelmore 11/19/2017 21:02'!identificationType: anIdentificationType 	self subclassResponsibility ! !!Party methodsFor: 'accessing' stamp: 'angelmore 11/19/2017 21:01'!firstName: aName 	self subclassResponsibility ! !!Party methodsFor: 'accessing' stamp: 'angelmore 11/19/2017 21:01'!identificationNumber		self subclassResponsibility ! !!Party methodsFor: 'accessing' stamp: 'angelmore 11/19/2017 21:01'!identificationNumber: anIdentificationNumber 	self subclassResponsibility ! !!Party methodsFor: 'accessing' stamp: 'angelmore 11/19/2017 21:01'!addressAt: aStreetName ifNone: noneClosure 		self subclassResponsibility ! !!Party methodsFor: 'accessing' stamp: 'angelmore 11/19/2017 21:02'!numberOfAddresses		self subclassResponsibility ! !!Party methodsFor: 'accessing' stamp: 'angelmore 11/19/2017 21:01'!addresses	self subclassResponsibility ! !!Party methodsFor: 'accessing' stamp: 'angelmore 11/19/2017 21:01'!firstName		self subclassResponsibility ! !!Party methodsFor: 'accessing' stamp: 'angelmore 11/19/2017 21:01'!identificationType		self subclassResponsibility ! !!Party methodsFor: 'accessing' stamp: 'angelmore 11/19/2017 21:01'!addressesIsEmpty		self subclassResponsibility ! !Party subclass: #Customer	instanceVariableNames: 'lastName'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!Customer methodsFor: 'as yet unclassified' stamp: 'HernanWilkinson 11/1/2016 10:05'!addressAt: aStreetName ifNone: noneClosure 		^addresses detect: [ :anAddress | anAddress isAt: aStreetName ] ifNone: noneClosure ! !!Customer methodsFor: 'as yet unclassified' stamp: 'HernanWilkinson 11/1/2016 18:03'!addressesIsEmpty		^addresses isEmpty! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationType		^identificationType ! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 16:13'!identificationNumber		^identificationNumber ! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 13:10'!identificationNumber: anIdentificationNumber 	identificationNumber := anIdentificationNumber! !!Customer methodsFor: 'identification' stamp: 'HernanWilkinson 10/28/2016 13:10'!identificationType: anIdentificationType 	identificationType := anIdentificationType! !!Customer methodsFor: 'testing' stamp: 'angelmore 11/19/2017 19:46'!isAt: aFirstName		^firstName = aFirstName. ! !!Customer methodsFor: 'initialization' stamp: 'HernanWilkinson 10/28/2016 13:26'!initialize	super initialize.	addresses := OrderedCollection new.! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!lastName: aLastName 	lastName := aLastName! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!lastName	^lastName ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!firstName		^firstName ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!firstName: aName 	firstName := aName! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:27'!addAddress: anAddress 	addresses add: anAddress ! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 10/28/2016 13:25'!addresses	^ addresses! !!Customer methodsFor: 'addresses' stamp: 'HernanWilkinson 11/1/2016 09:43'!numberOfAddresses		^addresses size! !CustomerSystem subclass: #PersistanceCustomerSystem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!PersistanceCustomerSystem methodsFor: 'accessing' stamp: 'Angel 11/13/2017 22:55'!persistCustomer: newCustomer	^ session persist: newCustomer! !!PersistanceCustomerSystem methodsFor: 'customers' stamp: 'Angel 11/13/2017 23:02'!allCustomers	^session selectAllOfType: Customer.! !!PersistanceCustomerSystem methodsFor: 'importing' stamp: 'Angel 11/13/2017 22:56'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber	| customers |	customers := session		select: [ :aCustomer | 			aCustomer identificationType = anIdentifycationType				and: [ aCustomer identificationNumber = anIdentificationNumber ] ]		ofType: Customer.	"self assert: customers size equals: 1."	^ customers anyOne! !!PersistanceCustomerSystem methodsFor: 'importing' stamp: 'angelmore 11/19/2017 15:40'!importCustomersFrom: inputStream	(CustomerImporter from: inputStream on: self) import! !!PersistanceCustomerSystem methodsFor: 'setup-teardown' stamp: 'Angel 11/13/2017 20:40'!addressMapping	^ ClassMapping		withDefaultTableNameFor: Address		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #streetName)				with: (EmbededMapping withDefaultFieldNameFor: #streetNumber)				with: (EmbededMapping withDefaultFieldNameFor: #town)				with: (EmbededMapping withDefaultFieldNameFor: #zipCode)				with: (EmbededMapping withDefaultFieldNameFor: #province))! !!PersistanceCustomerSystem methodsFor: 'setup-teardown' stamp: 'Angel 11/13/2017 21:06'!start	session :=			(DataBaseSession				for: (Array with: self addressMapping with: self customerMapping)).	session open.	session beginTransaction! !!PersistanceCustomerSystem methodsFor: 'setup-teardown' stamp: 'Angel 11/13/2017 20:41'!customerMapping	^ ClassMapping		withDefaultTableNameFor: Customer		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #firstName)				with: (EmbededMapping withDefaultFieldNameFor: #lastName)				with: (EmbededMapping withDefaultFieldNameFor: #identificationType)				with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)				with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address))! !!PersistanceCustomerSystem methodsFor: 'setup-teardown' stamp: 'Angel 11/13/2017 22:40'!stop	session commit.	session close! !Object subclass: #PersistanceSupplierSystem	instanceVariableNames: 'session'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!PersistanceSupplierSystem methodsFor: 'accessing' stamp: 'ANgel 11/16/2017 20:50'!persistSupplier: newSupplier	^ session persist: newSupplier! !!PersistanceSupplierSystem methodsFor: 'customers' stamp: 'ANgel 11/16/2017 21:35'!allSuppliers	^session selectAllOfType: Supplier .! !!PersistanceSupplierSystem methodsFor: 'customers' stamp: 'ANgel 11/16/2017 20:29'!allCustomers	^session selectAllOfType: Customer.! !!PersistanceSupplierSystem methodsFor: 'setup-teardown' stamp: 'ANgel 11/16/2017 20:29'!addressMapping	^ ClassMapping		withDefaultTableNameFor: Address		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #streetName)				with: (EmbededMapping withDefaultFieldNameFor: #streetNumber)				with: (EmbededMapping withDefaultFieldNameFor: #town)				with: (EmbededMapping withDefaultFieldNameFor: #zipCode)				with: (EmbededMapping withDefaultFieldNameFor: #province))! !!PersistanceSupplierSystem methodsFor: 'setup-teardown' stamp: 'ANgel 11/16/2017 21:26'!start	session :=			(DataBaseSession				for: (Array with: self addressMapping with: self customerMapping with: self supplierMapping)).	session open.	session beginTransaction! !!PersistanceSupplierSystem methodsFor: 'setup-teardown' stamp: 'angelmore 11/19/2017 16:40'!supplierMapping	^ ClassMapping		withDefaultTableNameFor: Supplier		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #firstName)				with: (EmbededMapping withDefaultFieldNameFor: #identificationType)				with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)				with: (OneToManyMapping withDefaultFieldNameFor: #customers ofType: Customer)				with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address))! !!PersistanceSupplierSystem methodsFor: 'setup-teardown' stamp: 'ANgel 11/16/2017 20:29'!stop	session commit.	session close! !!PersistanceSupplierSystem methodsFor: 'setup-teardown' stamp: 'ANgel 11/16/2017 20:29'!customerMapping	^ ClassMapping		withDefaultTableNameFor: Customer		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #firstName)				with: (EmbededMapping withDefaultFieldNameFor: #lastName)				with: (EmbededMapping withDefaultFieldNameFor: #identificationType)				with: (EmbededMapping withDefaultFieldNameFor: #identificationNumber)				with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address))! !!PersistanceSupplierSystem methodsFor: 'importing' stamp: 'angelmore 11/19/2017 16:54'!supplierIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber	| supplier|	supplier := session		select: [ :aSupplier| 			aSupplier identificationType = anIdentifycationType				and: [ aSupplier identificationNumber = anIdentificationNumber] ]		ofType: Supplier.	"self assert: customers size equals: 1."	^ supplier anyOne! !!PersistanceSupplierSystem methodsFor: 'importing' stamp: 'ANgel 11/16/2017 20:29'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber	| customers |	customers := session		select: [ :aCustomer | 			aCustomer identificationType = anIdentifycationType				and: [ aCustomer identificationNumber = anIdentificationNumber ] ]		ofType: Customer.	"self assert: customers size equals: 1."	^ customers anyOne! !!PersistanceSupplierSystem methodsFor: 'importing' stamp: 'ANgel 11/16/2017 20:53'!importSuppliersFrom: inputStream	(SupplierImporter from: inputStream on: self) import! !Party subclass: #Supplier	instanceVariableNames: 'customers'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!Supplier methodsFor: 'addresses' stamp: 'ANgel 11/16/2017 20:36'!numberOfAddresses		^addresses size! !!Supplier methodsFor: 'addresses' stamp: 'ANgel 11/16/2017 20:36'!addAddress: anAddress 	addresses add: anAddress ! !!Supplier methodsFor: 'addresses' stamp: 'angelmore 11/19/2017 19:21'!numberOfCustomers		^customers  size! !!Supplier methodsFor: 'addresses' stamp: 'ANgel 11/16/2017 20:36'!addresses	^ addresses! !!Supplier methodsFor: 'identification' stamp: 'ANgel 11/16/2017 20:36'!identificationType		^identificationType ! !!Supplier methodsFor: 'identification' stamp: 'ANgel 11/16/2017 20:36'!identificationNumber: anIdentificationNumber 	identificationNumber := anIdentificationNumber! !!Supplier methodsFor: 'identification' stamp: 'angelmore 11/19/2017 16:39'!identificationNumber		^identificationNumber ! !!Supplier methodsFor: 'identification' stamp: 'ANgel 11/16/2017 20:36'!identificationType: anIdentificationType 	identificationType := anIdentificationType! !!Supplier methodsFor: 'as yet unclassified' stamp: 'angelmore 11/19/2017 19:43'!customerCalled: aFirstName ifNone: noneClosure 		^customers detect: [ :anCustomer | anCustomer isAt: aFirstName ] ifNone: noneClosure. ! !!Supplier methodsFor: 'as yet unclassified' stamp: 'ANgel 11/16/2017 20:36'!addressAt: aStreetName ifNone: noneClosure 		^addresses detect: [ :anAddress | anAddress isAt: aStreetName ] ifNone: noneClosure ! !!Supplier methodsFor: 'as yet unclassified' stamp: 'ANgel 11/16/2017 20:36'!addressesIsEmpty		^addresses isEmpty! !!Supplier methodsFor: 'accessing' stamp: 'ANgel 11/16/2017 20:39'!customers	^ customers! !!Supplier methodsFor: 'adding' stamp: 'ANgel 11/16/2017 20:38'!addCustomer: aCustomer 	customers add: aCustomer ! !!Supplier methodsFor: 'name' stamp: 'ANgel 11/16/2017 20:36'!firstName		^firstName ! !!Supplier methodsFor: 'name' stamp: 'ANgel 11/16/2017 20:36'!firstName: aName 	firstName := aName! !!Supplier methodsFor: 'initialization' stamp: 'ANgel 11/16/2017 20:40'!initialize	super initialize.	addresses := OrderedCollection new.	customers := OrderedCollection new.! !TestCase subclass: #SupplierImportTest	instanceVariableNames: 'system'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!SupplierImportTest methodsFor: 'importing' stamp: 'angelmore 11/19/2017 16:25'!supplierIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber	^ system		supplierIdentifiedAs: anIdentifycationType		numbered: anIdentificationNumber! !!SupplierImportTest methodsFor: 'importing' stamp: 'ANgel 11/16/2017 20:25'!assertImportedSuppliersSizeIsCorrect	self assert: self allSuppliers size equals: 1! !!SupplierImportTest methodsFor: 'importing' stamp: 'ANgel 11/16/2017 20:17'!importSuppliersFrom: inputStream	system importSuppliersFrom: inputStream! !!SupplierImportTest methodsFor: 'test data' stamp: 'ANgel 11/16/2017 20:22'!setUp	system := Environment current createSupplierSystem.	system start! !!SupplierImportTest methodsFor: 'test data' stamp: 'angelmore 11/19/2017 16:53'!validTestDataWithSuppliers	^ ReadStream on: 'S,Supplier1,D,123NC,Pepe,Sanchez,D,22333444A,Maipu,888,Florida,1122,Buenos Aires'! !!SupplierImportTest methodsFor: 'asserting' stamp: 'angelmore 11/19/2017 19:24'!assertSupplier1WasImportedCorrectly	| supplier idType idNumber |	idType := 'D'.	idNumber := '123'.	supplier := self supplierIdentifiedAs: idType numbered: idNumber.		self assert: supplier isNamed: 'Supplier1' identfiedAs: idType withNumber: idNumber numberOfCustomers: 1 andNumberOfAddresses: 1.	self assert: supplier hasAddressAt: 'Maipu' number: 888 in: 'Florida' zipCode: 1122 province: 'Buenos Aires'.! !!SupplierImportTest methodsFor: 'asserting' stamp: 'angelmore 11/19/2017 19:44'!assert: supplier hasCustomerWithFirstName: firstName lastName: lastName identificationType: identificationType identificationNumber: identificationNumber	| customer |		customer := supplier customerCalled: firstName ifNone:[ self fail ].	self assert: customer firstName equals: firstName .	self assert: customer lastName  equals: lastName .	self assert: customer identificationType  equals: identificationType .	self assert: customer identificationNumber equals: identificationNumber.! !!SupplierImportTest methodsFor: 'asserting' stamp: 'angelmore 11/19/2017 19:32'!assert: supplier hasCustomerWithFirstName: fisrtName lastName: lastName in: town zipCode: zipCode province: province	| customer streetName streetNumber |		customer := supplier addressAt: streetName ifNone: [ self fail ].	self assert: customer streetName equals: streetName.	self assert: customer streetNumber equals: streetNumber.	self assert: customer town equals: town.	self assert: customer zipCode equals: zipCode.	self assert: customer province equals: province.! !!SupplierImportTest methodsFor: 'asserting' stamp: 'angelmore 11/19/2017 19:20'!assert: supplier isNamed: firstName identfiedAs: idType withNumber: idNumber numberOfCustomers: customersSize andNumberOfAddresses: addressesSize	self assert: supplier firstName equals: firstName.	self assert: supplier identificationType equals: idType.	self assert: supplier identificationNumber equals: idNumber.	self assert: supplier numberOfCustomers equals: customersSize .	self assert: supplier numberOfAddresses equals: addressesSize .! !!SupplierImportTest methodsFor: 'asserting' stamp: 'angelmore 11/19/2017 19:29'!assert: supplier hasAddressAt: streetName number: streetNumber in: town zipCode: zipCode province: province	| address |		address := supplier addressAt: streetName ifNone: [ self fail ].	self assert: address streetName equals: streetName.	self assert: address streetNumber equals: streetNumber.	self assert: address town equals: town.	self assert: address zipCode equals: zipCode.	self assert: address province equals: province.! !!SupplierImportTest methodsFor: 'as yet unclassified' stamp: 'ANgel 11/16/2017 21:34'!allSuppliers	^system allSuppliers! !!SupplierImportTest methodsFor: 'tests' stamp: 'angelmore 11/19/2017 19:47'!testImportCustomers	self importSuppliersFrom: self validTestDataWithSuppliers.	self assertImportedSuppliersSizeIsCorrect.	self assertSupplier1WasImportedCorrectly.! !Object subclass: #SupplierImporter	instanceVariableNames: 'line readStream session record newSupplier system'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'ANgel 11/16/2017 21:29'!assertValidCustomerRecordSize		record size ~= 5 ifTrue: [ self signalInvalidCustomerRecord ].	! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'ANgel 11/16/2017 21:28'!assertValidSupplierRecordSize		record size ~= 4 ifTrue: [ self signalInvalidSupplierRecord ].	! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'ANgel 11/16/2017 20:57'!importCustomer	| newCustomer |	self assertValidCustomerRecordSize.	newCustomer := Customer new.	newCustomer firstName: record second.	newCustomer lastName: record third.	newCustomer identificationType: record fourth.	newCustomer identificationNumber: record fifth.	^newSupplier addCustomer: newCustomer! !!SupplierImporter methodsFor: 'importing - private - customer' stamp: 'ANgel 11/16/2017 21:05'!isCustomerRecord	^ record first = 'NC'! !!SupplierImporter methodsFor: 'error signal' stamp: 'ANgel 11/16/2017 20:49'!signalInvalidAddressRecord 		self error: self class invalidAddressRecordErrorDescription ! !!SupplierImporter methodsFor: 'error signal' stamp: 'ANgel 11/16/2017 20:49'!signalInvalidRecordType	self error: self class invalidRecordTypeErrorDescription! !!SupplierImporter methodsFor: 'error signal' stamp: 'ANgel 11/16/2017 21:12'!signalInvalidSupplierRecord 		self error: self class invalidSupplierRecordErrorDescription ! !!SupplierImporter methodsFor: 'error signal' stamp: 'ANgel 11/16/2017 20:49'!signalAddressWithoutCustomerError	self error: self class addressWithoutCustomerErrorDescription.! !!SupplierImporter methodsFor: 'error signal' stamp: 'ANgel 11/16/2017 20:49'!signalInvalidCustomerRecord 		self error: self class invalidCustomerRecordErrorDescription ! !!SupplierImporter methodsFor: 'initialization' stamp: 'ANgel 11/16/2017 20:49'!initializeOn: aReadStream on: aSystem	readStream := aReadStream.	system := aSystem.! !!SupplierImporter methodsFor: 'importing' stamp: 'ANgel 11/16/2017 20:49'!import	[ self canImportNextLine ] whileTrue: [ 		self convertLineToRecord.		self importRecord ]! !!SupplierImporter methodsFor: 'importing' stamp: 'ANgel 11/16/2017 20:52'!importSuppliersFrom: inputStream	system importSuppliersFrom: inputStream! !!SupplierImporter methodsFor: 'as yet unclassified' stamp: 'ANgel 11/16/2017 21:29'!importSupplier	self assertValidSupplierRecordSize.		newSupplier := Supplier new.	newSupplier firstName: record second.	newSupplier identificationType: record third.	newSupplier identificationNumber: record fourth.	^ system persistSupplier: newSupplier.! !!SupplierImporter methodsFor: 'importing - private - address' stamp: 'ANgel 11/16/2017 20:49'!isAddressRecord	^ record first = 'A'! !!SupplierImporter methodsFor: 'importing - private - address' stamp: 'ANgel 11/16/2017 20:55'!importAddress	| newAddress |	self assertThereIsCustsomerForAddress.	self assertValidAddressRecordSize.		newAddress := Address new.	newAddress streetName: record second.	newAddress streetNumber: record third asInteger.	newAddress town: record fourth.	newAddress zipCode: record fifth asInteger.	newAddress province: record sixth.	^ newSupplier addAddress: newAddress! !!SupplierImporter methodsFor: 'importing - private - address' stamp: 'ANgel 11/16/2017 20:49'!assertValidAddressRecordSize		record size ~= 6 ifTrue: [ self signalInvalidAddressRecord ].	! !!SupplierImporter methodsFor: 'importing - private - address' stamp: 'ANgel 11/16/2017 21:30'!assertThereIsCustsomerForAddress	newSupplier isNil ifTrue: [ self signalAddressWithoutCustomerError ].	! !!SupplierImporter methodsFor: 'testing' stamp: 'ANgel 11/16/2017 21:03'!isSupplierRecord	^ record first = 'S'! !!SupplierImporter methodsFor: 'importing - private' stamp: 'ANgel 11/16/2017 20:49'!convertLineToRecord	record := line substrings: {$,}.		self assertRecordNotEmpty! !!SupplierImporter methodsFor: 'importing - private' stamp: 'ANgel 11/16/2017 20:49'!canImportNextLine	line := readStream nextLine.	^ line notNil! !!SupplierImporter methodsFor: 'importing - private' stamp: 'ANgel 11/16/2017 21:04'!importRecord		self isSupplierRecord ifTrue: [ ^self importSupplier ].	self isCustomerRecord ifTrue: [ ^self importCustomer ].	self isAddressRecord ifTrue: [ ^self importAddress ].		self signalInvalidRecordType! !!SupplierImporter methodsFor: 'importing - private' stamp: 'ANgel 11/16/2017 20:49'!assertRecordNotEmpty		record isEmpty ifTrue: [ self signalInvalidRecordType ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SupplierImporter class	instanceVariableNames: ''!!SupplierImporter class methodsFor: 'instance creation' stamp: 'ANgel 11/16/2017 20:49'!from: aReadStream on: aSystem	^self new initializeOn: aReadStream on: aSystem ! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'ANgel 11/16/2017 20:49'!invalidAddressRecordErrorDescription		^'Invalid address record'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'ANgel 11/16/2017 20:49'!invalidCustomerRecordErrorDescription		^'Invalid customer record'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'ANgel 11/16/2017 21:13'!invalidSupplierRecordErrorDescription		^'Invalid customer record'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'ANgel 11/16/2017 20:49'!addressWithoutCustomerErrorDescription		^'There is no Customer for the imported address'! !!SupplierImporter class methodsFor: 'error descriptions' stamp: 'ANgel 11/16/2017 20:49'!invalidRecordTypeErrorDescription		^'Invalid record type'! !CustomerSystem subclass: #TransientCustomerSystem	instanceVariableNames: 'customers'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!TransientCustomerSystem methodsFor: 'importing' stamp: 'ANgel 11/16/2017 19:26'!start	customers := OrderedCollection new.! !!TransientCustomerSystem methodsFor: 'importing' stamp: 'ANgel 11/16/2017 19:26'!persistCustomer: aCustomer 	customers add: aCustomer! !!TransientCustomerSystem methodsFor: 'importing' stamp: 'ANgel 11/16/2017 19:26'!stop! !!TransientCustomerSystem methodsFor: 'importing' stamp: 'angelmore 11/19/2017 15:43'!importCustomersFrom: inputStream 	(CustomerImporter from: inputStream on: self) import! !!TransientCustomerSystem methodsFor: 'importing' stamp: 'ANgel 11/16/2017 19:25'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber		^customers detect: [ :aCustomer | "delegar respon al customer"			aCustomer identificationType = anIdentifycationType				and: [ aCustomer identificationNumber = anIdentificationNumber ] ]! !!TransientCustomerSystem methodsFor: 'customers' stamp: 'ANgel 11/16/2017 19:25'!allCustomers	^customers copy! !